# https://learn.microsoft.com/en-us/dotnet/devops/dotnet-test-github-action
# 
name: Test, Pack, Release
#run-name: '${{ join( github.event.commits.*.message ) }} // ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

#run-name: '${{ github.workflow }} run #${{ github.run_number }} - ${{ github.event_name }}: ${{ join( github.event.commits.*.message ) }} // ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  push:
    paths:
      - '**.cs'
      - '**.csproj'
  workflow_dispatch:
    inputs:
      release_to_nuget:
        description: 'Pack and release to nuget.org'
        required: true
        type: boolean
      # URGENT: ðŸš¨: need to change CSPROJ to use package_version if present
      # https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-use-environment-variables-in-a-build
#      release_version:
#        description: 'Override PackageVersion'
#        required: false
#        type: string
      release_type:
        description: 'Use a Release PackageVersion'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - prerelease
          - stable
      readme_render_mermaid:
        description: 'Render mermaid diagrams for nuget.org README'
        required: true
        type: boolean


# If I wanted to use inputs
# https://docs.github.com/en/actions/learn-github-actions/contexts#example-usage-of-the-inputs-context-in-a-reusable-workflow

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  README_FILENAME: README.md
  README_INPUT_PATH: ./
  README_OUTPUT_PATH: ./docs/rendered/
  TZ: America/Chicago


jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
    steps:
      # action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
      # 
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: ./global.json
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --logger "console;verbosity=normal" --logger "html;logfilename=testResults.html" --logger:"trx;LogFilePrefix=testResults" --filter '(FullyQualifiedName!~Latency)&(FullyQualifiedName!~AddingAndRemovingReadersShouldNeverError)' --collect:"XPlat Code Coverage"
        working-directory: ./test/mkmrk.Channels.Tests/
      # 
      # https://github.com/marketplace/actions/publish-test-results#configuration
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          comment_mode: off
          files: ./test/mkmrk.Channels.Tests/TestResults/**/*.trx
#          files: |
#            ./test/mkmrk.Channels.Tests/TestResults/**/*.xml
#            ./test/mkmrk.Channels.Tests/TestResults/**/*.trx
#            ./test/mkmrk.Channels.Tests/TestResults/**/*.json

      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      - name: Coverage Report Generator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.22
        with:
          reports: ./test/mkmrk.Channels.Tests/TestResults/**/coverage.cobertura.xml
          targetdir: ./docs/coverage/
          reporttypes: Html_Light;JsonSummary;TextSummary;TextDeltaSummary;MarkdownSummaryGithub;PngChart;Badges
          sourcedirs: ./src/mkmrk.Channels/
#          filefilters: -./src/mkmrk.Channels/ChannelMux/DotnetRuntimeSourced/*
          filefilters: +*,-AsyncOperation.cs;-ChannelUtilities.cs;-SingleProducerSingleConsumer.cs
          # TODO: history requires that I commit this directory
          historydir: ./docs/coverage/history/
          verbosity: Verbose
          tag: '${{ github.sha }}_${{ github.run_number }}'
          title: '${{ github.repository }} coverage'
      #
      - name: Show Changes
        run: |
          git status --short
        if: ${{ always() }}

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-test-results
          path: |
            ./test/mkmrk.Channels.Tests/TestResults/
            ./test/mkmrk.Channels.Tests/diagnostics.*
            ./docs/coverage/
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}

  # TODO: generate reports? ( upload in test, build in render-mermaid-diagrams ? )
  
  render-mermaid-diagrams:
    runs-on: ubuntu-latest
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-a-workflow-based-on-the-conclusion-of-another-workflow
    if: ${{ inputs.readme_render_mermaid }}
    
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3

      - name: Install mermaid-cli
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Create docs directory for rendered images
        run: mkdir -p ./docs/rendered

      - name: Generate SVGs and modified markdown with mermaid-cli
        run: mmdc --input ${{ env.README_INPUT_PATH }}${{ env.README_FILENAME }} --output ${{ env.README_OUTPUT_PATH }}${{ env.README_FILENAME }} -b transparent

      - name: Make image links absolute URLs
        shell: pwsh
        run: |
          $readmeTxt = Get-Content -Raw -Path "${{ env.README_FILENAME }}" ; `
          [System.Text.RegularExpressions.Regex]::Replace($readmeTxt,'^(!\[[^\]]*\]\()(\.\/)','$1https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/${{ inputs.README_OUTPUT_PATH }}/',[System.Text.RegularExpressions.RegexOptions]::Multiline) | Set-Content -Path "${{ env.README_FILENAME }}";
        working-directory: ${{ env.README_OUTPUT_PATH }}

      - name: Show Changes
        run: |
          echo ===Changes===
          git status --short

      # https://github.com/actions/upload-artifact
      - name: Upload mermaid diagram render outputs
        uses: actions/upload-artifact@v3
        with:
          name: Mermaid Render Results
          path: ${{ env.README_OUTPUT_PATH }}
        if: ${{ always() }}

      # https://github.com/stefanzweifel/git-auto-commit-action
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Render mermaid diagrams

      - name: "Run if changes have been detected"
        if: steps.auto-commit-action.outputs.changes_detected == 'true'
        run: echo "Changes!"

      - name: "Run if no changes have been detected"
        if: steps.auto-commit-action.outputs.changes_detected == 'false'
        run: echo "No Changes!"
          
      # reports?
      #   here or under the Test job?
      # Coverage
      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      #
      # Test results
      # https://github.com/marketplace/actions/publish-test-results#github-actions-job-summary
  
  
  pack:
    runs-on: ubuntu-latest
    needs: [test, render-mermaid-diagrams]
    permissions:
      packages: write
    env:
      RELEASE_TO_NUGET: ${{ inputs.release_to_nuget }}
      RELEASE_TYPE: ${{ inputs.release_type }}
    steps:
      # action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
      # 
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: ./global.json

      - name: Install dependencies
        run: dotnet restore
      
      # modify the PackageVersion if set
      - name: Package
        run: dotnet pack --configuration Release

      - name: Publish to GitHub Packages
        run: dotnet nuget push *pkg -s https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./src/mkmrk.Channels/bin/Release

      - name: Publish the package to nuget.org
        run: dotnet nuget push *pkg -s https://api.nuget.org/v3/index.json --api-key $NUGET_AUTH_TOKEN
        if: ${{ inputs.release_to_nuget }}
        working-directory: ./src/mkmrk.Channels/bin/Release
        # TODO: check nupkg & snupkg both push
        env:
          # https://docs.github.com/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
          # The NUGET_AUTH_TOKEN must exist in the repository as a secret
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}

      # https://github.com/actions/upload-artifact
      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: ./src/mkmrk.Channels/bin/Release

#
#
