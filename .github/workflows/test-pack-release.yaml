# https://learn.microsoft.com/en-us/dotnet/devops/dotnet-test-github-action
# 
name: 'Test & Build'
#run-name: '${{ join( github.event.commits.*.message ) }} // ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

#run-name: '${{ github.workflow }} run #${{ github.run_number }} - ${{ github.event_name }}: ${{ join( github.event.commits.*.message ) }} // ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  push:
    paths:
      - '**.cs'
      - '**.csproj'
  workflow_dispatch:
    inputs:
      readme_render_mermaid:
        description: 'Render mermaid diagrams for nuget.org README'
        required: true
        type: boolean
      build_pages:
        description: 'Build DoxFX and refresh GitHub Pages'
        required: true
        type: boolean
        default: false
      # URGENT: ðŸš¨: need to change CSPROJ to use package_version if present
      # https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-use-environment-variables-in-a-build
#      release_version:
#        description: 'Override PackageVersion'
#        required: false
#        type: string
      release_type:
        description: 'Use a Release PackageVersion'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - prerelease
          - stable
      release_to_github:
        description: 'Pack and release to GitHub Package Manager'
        required: true
        type: boolean
        default: false
      release_to_nuget:
        description: 'Pack and release to nuget.org'
        required: true
        type: boolean
        default: false


# If I wanted to use inputs
# https://docs.github.com/en/actions/learn-github-actions/contexts#example-usage-of-the-inputs-context-in-a-reusable-workflow

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

env:
  README_FILENAME: README.md
  README_INPUT_PATH: ./
  README_OUTPUT_PATH: docs/rendered/
  TZ: America/Chicago
  BUILD_FAILED: ${{ false }}

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      checks: write
    steps:
      # action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
      # 
      - name: Create directory structure
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path ./docs/tests -ErrorAction Continue
          New-Item -ItemType Directory -Path ./docs/build-logs -ErrorAction Continue
      #
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: ./global.json
      - name: Install dependencies
        run: dotnet restore
      #
      # Build
      - name: Build
        id: build
        working-directory: ./src/mkmrk.Channels/
        run: |
          dotnet build \
            --no-restore \
            --configuration Release \
            -consoleloggerparameters:"Summary;Verbosity=normal" \
            -m \
            -t:"clean,build" \
            -fl1 "/flp1:logFile=mkmrk-channels-build.log;warningsonly" \
            -p:"WarnLevel=5"
          mv *-build.log ../../docs/build-logs
      #
      - name: Mark Build Failed
        if: ${{ failure() }}
        run: |
          echo "BUILD_FAILED=${{ true }}" >> "$GITHUB_ENV"
      # KILL â†“
      - name: Test if BUILD_FAILED is set
        if: ${{ env.BUILD_FAILED == 'true' }}
        run: |
          echo ${{ env.BUILD_FAILED }}
          echo $BUILD_FAILED
          echo "::error title=BUILD_FAILED=${{ env.BUILD_FAILED }}::Build failed, will not continue with coverage or unit test reports."
          exit 1
      #
      - name: Test
        run: |
          dotnet test --no-restore \
                      --logger "console;verbosity=normal" \
                      --logger:"trx;LogFilePrefix=testResults" \
                      --blame-hang-timeout 5m \
                      --filter '(FullyQualifiedName!~Latency)&(FullyQualifiedName!~AddingAndRemovingReadersShouldNeverError)' \
                      --collect:"Code Coverage;Format=Cobertura" \
                      -- \
                      DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByFile=**/DotnetRuntimeSourced/*
        working-directory: ./test/mkmrk.Channels.Tests/
      # 
      # https://github.com/marketplace/actions/publish-test-results#configuration
      - name: Publish Test Results
        id: report-test-results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          comment_mode: off
          files: ./test/mkmrk.Channels.Tests/TestResults/**/*.trx
      # 
      # Badge
      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.report-test-results.outputs.json ).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac
      #
      - name: Create badge
        uses: emibcn/badge-action@v2.0.2
        with:
          label: Tests
          status: '${{ fromJSON( steps.report-test-results.outputs.json ).formatted.stats.tests_succ }} of ${{ fromJSON( steps.report-test-results.outputs.json ).formatted.stats.tests }} passing: ${{ fromJSON( steps.report-test-results.outputs.json ).conclusion }}'
          color: ${{ env.BADGE_COLOR }}
          # TODO: Add this to the README
          path: ./docs/tests/test-result-badge.svg
      #
      #
      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      - name: Coverage Report Generator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.22
        with:
          reports: ./test/mkmrk.Channels.Tests/TestResults/**/*.cobertura.xml
          targetdir: ./docs/coverage/
          reporttypes: MarkdownSummaryGithub;Badges;HtmlInline #Html_Light;JsonSummary;TextSummary;TextDeltaSummary;MarkdownSummaryGithub;PngChart;Badges
          sourcedirs: ./src/mkmrk.Channels/
          # history requires that I commit this directory
          historydir: ./docs/coverage/history/
          verbosity: Verbose
          classfilters: '+*;-System.Collections.Concurrent*;-System.Threading.Channels*'
          assemblyfilters: '+mkmrk.Channels'
          # TODO: may need to make this something static to keep from making commits even when nothing changes
          #tag: '${{ github.sha }}_${{ github.run_number }}'
          title: '${{ github.repository }} coverage'
      #
      - name: Print coverage summary to Workflow Summary
        shell: pwsh
        run: |
          # 
          Remove-Item -Path ./docs/coverage/* -Include *.svg -Exclude badge_shieldsio_linecoverage_blue.svg
          Get-Content -Path ./docs/coverage/SummaryGithub.md | ForEach-Object {
              Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value $_ ;
          }
      #
      - name: Show Changes
        run: |
          git status --short
        if: ${{ always() }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-test-results
          path: |
            ./test/mkmrk.Channels.Tests/TestResults/
            ./test/mkmrk.Channels.Tests/diagnostics.*
        if: ${{ failure() }}
        #
      # URGENT: NEEDS TESTING!
      - name: Retrieve coverage and metadata history archive
      #  shell: pwsh
        continue-on-error: true
        run: |
          wget http://www.hiller.pro/mkmrk.Channels/coverage/history/coverage-history.zip
          unzip -j coverage-history.zip -d ./docs/coverage/history/
          mkdir -p ./docs/stats/metadata/
          wget http://www.hiller.pro/mkmrk.Channels/stats/metadata/metadata-archive.zip
          unzip -j metadata-archive.zip -d ./docs/stats/metadata/
      #
      #
      - name: 'Run gh-action-plot'
        uses: erichiller/gh-action-plot@v1.0.0
        if: ${{ always() }}
        with:
          source_scan_dir: './'
          output_dir: './docs/stats'
          test_results_dir: './test/mkmrk.Channels.Tests/'
          coverage_history_dir: './docs/coverage/history/'
      #
      # URGENT: NEEDS TESTING!
      - name: Archive coverage history
      #  shell: pwsh
        run: |
          zip -j ./docs/stats/metadata/metadata-archive.zip -r ./docs/stats/metadata
          zip -j ./docs/coverage/history/coverage-history.zip -r ./docs/coverage/history
          zip -j ./docs/tests/test-results.zip -r ./test/mkmrk.Channels.Tests/ --include \*.trx
      #
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: test-generated-content
          path: |
            ./docs/coverage/
            ./docs/rendered/
            ./docs/tests/
            ./docs/stats/
            ./docs/build-log/

  docfx:
    if: ${{ inputs.release_to_github || inputs.release_to_nuget || inputs.build_pages }}
    # TODO: I don't think I actually need mermaid for this
    # needs: [test, render-mermaid-diagrams]
    needs: [test]
    uses: erichiller/mkmrk.Channels/.github/workflows/docfx.yaml@master
    permissions:
      contents: read
      pages: write
      id-token: write
  
  render-mermaid-diagrams:
    runs-on: ubuntu-latest
    #needs: [test]
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-a-workflow-based-on-the-conclusion-of-another-workflow
    if: ${{ inputs.readme_render_mermaid || inputs.release_to_github || inputs.release_to_nuget || inputs.build_pages }}
    
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3

      - name: Install mermaid-cli
        run: npm install -g @mermaid-js/mermaid-cli

      - name: Create docs directory for rendered images
        run: mkdir -p ./docs/rendered

      - name: Generate SVGs and modified markdown with mermaid-cli
        run: mmdc --input ${{ env.README_INPUT_PATH }}${{ env.README_FILENAME }} --output ${{ env.README_OUTPUT_PATH }}${{ env.README_FILENAME }} -b transparent

      # URGENT: MUST BE UPDATED!
      - name: Make image links absolute URLs
        shell: pwsh
        run: |
          $readmeTxt = Get-Content -Raw -Path "${{ env.README_FILENAME }}" ; `
          [System.Text.RegularExpressions.Regex]::Replace($readmeTxt,'^(!\[[^\]]*\]\()(\.\/)','$1https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/${{ env.README_OUTPUT_PATH }}',[System.Text.RegularExpressions.RegexOptions]::Multiline) | Set-Content -Path "${{ env.README_FILENAME }}";
        working-directory: ${{ env.README_OUTPUT_PATH }}

      #- name: Download test coverage report
      #  uses: actions/download-artifact@v3
      #  with:
      #    name: coverage-report
      #    path: ./docs/

      - name: Show Changes
        run: |
          echo ===Changes===
          git status --short

      # https://github.com/actions/upload-artifact
      - name: Upload mermaid diagram render outputs
        uses: actions/upload-artifact@v3
        with:
          name: Mermaid Render Results
          path: ${{ env.README_OUTPUT_PATH }}
        if: ${{ always() }}

      # temporary KILL
      #- name: remove old files
      #  shell: pwsh
      #  run: |
      #    Remove-Item -Force -Recurse -Path ./docs/coverage -ErrorAction 'Continue'
      #    Remove-Item -Force -Recurse -Path ./docs/tests -ErrorAction 'Continue'
      #    Remove-Item -Force -Recurse -Path ./docs/rendered -ErrorAction 'Continue'
      # https://github.com/stefanzweifel/git-auto-commit-action
      #- uses: stefanzweifel/git-auto-commit-action@v4
      #  with:
      #    commit_message: Render mermaid diagrams

      #- name: "Run if changes have been detected"
      #  if: steps.auto-commit-action.outputs.changes_detected == 'true'
      #  run: echo "Changes!"

      #- name: "Run if no changes have been detected"
      #  if: steps.auto-commit-action.outputs.changes_detected == 'false'
      #  run: echo "No Changes!"
          
      # reports?
      #   here or under the Test job?
      # Coverage
      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      #
      # Test results
      # https://github.com/marketplace/actions/publish-test-results#github-actions-job-summary
  
  
  pack:
    runs-on: ubuntu-latest
    if: ${{ inputs.release_to_github || inputs.release_to_nuget }}
    needs: [test, render-mermaid-diagrams]
    permissions:
      packages: write
    env:
      RELEASE_TO_NUGET: ${{ inputs.release_to_nuget }}
      RELEASE_TYPE: ${{ inputs.release_type }}
    steps:
      # action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v3
      # 
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: ./global.json

      - name: Install dependencies
        run: dotnet restore
      
      # modify the PackageVersion if set
      - name: Package
        run: dotnet pack --configuration Release

      - name: Publish to GitHub Packages
        if: ${{ inputs.release_to_github }}
        run: dotnet nuget push *pkg -s https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./src/mkmrk.Channels/bin/Release

      - name: Publish the package to nuget.org
        run: dotnet nuget push *pkg -s https://api.nuget.org/v3/index.json --api-key $NUGET_AUTH_TOKEN
        if: ${{ inputs.release_to_nuget }}
        working-directory: ./src/mkmrk.Channels/bin/Release
        # TODO: check nupkg & snupkg both push
        env:
          # https://docs.github.com/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
          # The NUGET_AUTH_TOKEN must exist in the repository as a secret
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TOKEN }}

      # https://github.com/actions/upload-artifact
      - name: Upload package
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: ./src/mkmrk.Channels/bin/Release

#
#
