<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>
        <ImplicitUsings>disable</ImplicitUsings>
        <Nullable>enable</Nullable>
    </PropertyGroup>

    <!--    -->
    <!-- Nuget package metadata -->
    <PropertyGroup>
        <PackageId>mkmrk.Channels</PackageId>
        <Description>
            Provides `BroadcastChannel`, a single type, single input, multi output type where each output is guaranteed to receive all the data from the input, and
            `ChannelMux` which is meant to aggregate multiple `BroadcastChannel` of multiple outputs into a single, awaitable object.--&gt;
        </Description>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <!--        <Authors>Eric D. Hiller</Authors>-->
        <!--        <Company>mkmrk</Company>-->
        <!--        <Copyright>Copyright 2023 Â© Eric D. Hiller</Copyright>-->
        <!--        <PackageLicenseExpression>MIT</PackageLicenseExpression>-->
        <!--&lt;!&ndash;        TODO: include the below or add a README ?? &ndash;&gt;-->
        <!--&lt;!&ndash;        <Description>&ndash;&gt;-->
        <!--&lt;!&ndash;            ## `BroadcastChannel`&ndash;&gt;-->

        <!--&lt;!&ndash;            Is a single input, multi output type where each output is guaranteed to receive all the data from the input.&ndash;&gt;-->
        <!--&lt;!&ndash;            This is in contrast to `System.Threading.Channels.Channel` or a _Queue_ type where each input is only ever read by a&ndash;&gt;-->
        <!--&lt;!&ndash;            single output.&ndash;&gt;-->

        <!--&lt;!&ndash;            ## `ChannelMux`&ndash;&gt;-->

        <!--&lt;!&ndash;            `ChannelMux` is meant to aggregate multiple `BroadcastChannel` into a single, awaitable object.&ndash;&gt;-->
        <!--&lt;!&ndash;            It is a generic type and each type parameter has a dedicated `TryRead(out T data)` method.&ndash;&gt;-->
        <!--&lt;!&ndash;            `ChannelMuxInput` acts presents as a writer to `BroadcastChannelWriter` and each has a&ndash;&gt;-->
        <!--&lt;!&ndash;            `SingleProducerSingleConsumerQueue`.&ndash;&gt;-->

        <!--&lt;!&ndash;            Note that each `ChannelMuxInput` is a single input, single output where _single_ means both a single instance writing&ndash;&gt;-->
        <!--&lt;!&ndash;            and a single instance reading, and thus can be optimized using `SingleProducerSingleConsumerQueue`.&ndash;&gt;-->
        <!--&lt;!&ndash;        </Description>&ndash;&gt;-->
        <!--        <PackageTags>Channels;Interthread;Queues</PackageTags>-->
        <!--        &lt;!&ndash;<PackageIcon>channels-icon.png</PackageIcon>&ndash;&gt;-->
        <!--        <PackageProjectUrl>https://github.com/erichiller/mkmrk.Channels</PackageProjectUrl>-->
        <!--        <RepositoryUrl>https://github.com/erichiller/mkmrk.Channels</RepositoryUrl>-->
        <!--        <RepositoryType>git</RepositoryType>-->
        <!--        <PublishRepositoryUrl>true</PublishRepositoryUrl>-->
        <!--        &lt;!&ndash;.snupkg&ndash;&gt;-->
        <!--        <IncludeSymbols>true</IncludeSymbols>-->
        <!--        <SymbolPackageFormat>snupkg</SymbolPackageFormat>-->
    </PropertyGroup>

    <PropertyGroup>
        <EnablePackageValidation>true</EnablePackageValidation>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <!--TODO: disable auto-build package for now.-->
<!--                <GeneratePackageOnBuild>true</GeneratePackageOnBuild> &lt;!&ndash; Generates a package at build &ndash;&gt;-->

        <!--Unsure if this should be set or not, see: https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#copydocumentationfilesfrompackages -->
        <!--<CopyDocumentationFilesFromPackages>true</CopyDocumentationFilesFromPackages>-->
        <!--<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>-->
    </PropertyGroup>
    
    <ItemGroup>
        <None Include="../../README.md" Pack="true" PackagePath="\" />
    </ItemGroup>


    <Target Name="SetSourceRevisionId" BeforeTargets="InitializeSourceControlInformation">
        <Exec Command="git log -n1 --format=format:'%h'" ConsoleToMSBuild="True" IgnoreExitCode="False">
            <Output PropertyName="SourceRevisionId" TaskParameter="ConsoleOutput" />
        </Exec>
        <Message Importance="high" Text="Project File Name = $(MSBuildProjectFile)" />
        <Message Text="Project Extension = $(MSBuildProjectExtension)" />
        <Message Text="Project SourceRevisionId = $(SourceRevisionId)" />
    </Target>
    <PropertyGroup>
        <Version>$([System.DateTime]::Now.ToString("yyyy.MM.dd.HHmm"))</Version>
        <InformationalVersion>$([System.DateTime]::Now.ToString("yyyy.MM.dd.HHmmss"))$(SourceRevisionId)</InformationalVersion>
    </PropertyGroup>


    <ItemGroup Condition=" '$(TargetFramework)' == 'net8.0' ">
        <PackageReference Include="Microsoft.CodeAnalysis.PublicApiAnalyzers" PrivateAssets="All" />
    </ItemGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.SourceLink.GitHub" PrivateAssets="All" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="JetBrains.Annotations" />
        <PackageReference Include="Microsoft.Extensions.Logging" />
        <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
    </ItemGroup>

</Project>
